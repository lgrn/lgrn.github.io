<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ps on agren.cc</title><link>https://agren.cc/p/</link><description>Recent content in Ps on agren.cc</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 25 Dec 2022 14:00:00 +0200</lastBuildDate><atom:link href="https://agren.cc/p/index.xml" rel="self" type="application/rss+xml"/><item><title>Using any device on Wi-Fi with captive portals</title><link>https://agren.cc/p/any-device-captive-wifi/</link><pubDate>Sun, 25 Dec 2022 14:00:00 +0200</pubDate><guid>https://agren.cc/p/any-device-captive-wifi/</guid><description>Maybe you&amp;rsquo;re at a hotel, an airport, a conference, or somewhere else where whoever set up the Wi-Fi thought it was a good idea to use so-called captive portals.</description><content>&lt;p>Maybe you&amp;rsquo;re at a hotel, an airport, a conference, or somewhere else where whoever set up the Wi-Fi thought it was a good idea to use so-called &lt;a href="https://en.wikipedia.org/wiki/Captive_portal">captive portals&lt;/a>.&lt;/p>
&lt;p>Regardless of their purpose, whether it&amp;rsquo;s to limit connection for a specific time, or force end-users to accept some kind of agreement, they usually work the same way: they force you through some kind of web UI, and in the end it will validate your device based on the MAC address only.&lt;/p>
&lt;p>A MAC address can be changed, which means that if you have a device that cannot access the portal, you can still get that device onto the network by doing the following:&lt;/p>
&lt;ul>
&lt;li>Find out the MAC address of the device&lt;/li>
&lt;li>Change your laptop&amp;rsquo;s MAC to match the device&lt;/li>
&lt;li>Go through the validation process&lt;/li>
&lt;li>Change your laptop&amp;rsquo;s MAC back to something else&lt;/li>
&lt;/ul>
&lt;p>In short, by masquerading your laptop as the other device, you can ensure that MAC address gets whitelisted, giving your other device access.&lt;/p>
&lt;h2 id="step-1-figure-out-the-mac-address">Step 1: Figure out the MAC address&lt;/h2>
&lt;p>You may be able to figure out the MAC of the device from a physical sticker, or if it has a settings menu you can probably see it under network settings. In this case, it&amp;rsquo;s a Samsung TV where the built-in browser can&amp;rsquo;t handle the web portal. Let&amp;rsquo;s call it &lt;code>84:C0:EF:00:00:00&lt;/code>.&lt;/p>
&lt;h2 id="step-2-change-your-laptops-mac">Step 2: Change your laptop&amp;rsquo;s MAC&lt;/h2>
&lt;p>In Linux, this can be done with &lt;code>macchanger&lt;/code>, likely available from your package manager. Remember to disable your wifi device first.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">sudo macchanger --mac=84:C0:EF:00:00:00 wlp0s20f3
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="step-3-authenticate">Step 3: Authenticate&lt;/h2>
&lt;p>With your new MAC address, authenticate to the wifi just like you otherwise would, or if you&amp;rsquo;re cool, figure out the curl commands to do it. &amp;ldquo;Network&amp;rdquo; under the developer console (F12) in Firefox is helpful for this, and can export &lt;code>POST&lt;/code> requests as curl which is convenient. It might look something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">curl &amp;#34;$URL&amp;#34; -X POST -H &amp;#39;Accept: */*&amp;#39; -H &amp;#39;Accept-Language: en-US,en;q=0.5&amp;#39; \
-H &amp;#39;Accept-Encoding: gzip, deflate, br&amp;#39; \
-H &amp;#39;Referer: https://www.example.com/en/online-booking/Customer/EmailLogin?context=default&amp;#39; \
-H &amp;#39;Content-Type: application/json&amp;#39; -H &amp;#39;Origin: https://www.example.com&amp;#39; \
--cookie-jar &amp;#39;/tmp/cookiejar&amp;#39; \
--data-raw &amp;#39;{&amp;#34;Email&amp;#34;:&amp;#34;foo@foo.foo&amp;#34;,&amp;#34;Password&amp;#34;:&amp;#34;f00b4r&amp;#34;,&amp;#34;PersistentLogin&amp;#34;:true,&amp;#34;IsModal&amp;#34;:false}&amp;#39;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If there&amp;rsquo;s multiple steps required, like also accepting terms of usage after a login, the &lt;code>--cookie-jar&lt;/code> flag is crucial here to allow the use of &lt;code>--cookie&lt;/code> in your next command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">curl &amp;#34;https://www.example.com/wifi/?terms=accepted&amp;#34; --cookie &amp;#39;/tmp/cookiejar&amp;#39;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This allows you to accept the terms with whatever cookies that were given to you when logging in.&lt;/p>
&lt;p>If the responses are JSON, you can just pipe them to &lt;code>jq&lt;/code> to easily see if all went OK.&lt;/p>
&lt;h2 id="step-4-reset-your-mac-again">Step 4: Reset your MAC again&lt;/h2>
&lt;p>If you got access working with the modified address in Step 3, you can now switch MAC again on your laptop. In this case, we&amp;rsquo;ll just pick a random one. Shut down your wireless device again, and run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">sudo macchanger -a wlp0s20f3
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can now re-authenticate your laptop, and when testing the other device, it should be allowed through.&lt;/p>
&lt;p>If not, you may need to disable the connection on that device and re-connect to the network. At this point, there shouldn&amp;rsquo;t be a portal in the way.&lt;/p></content></item><item><title>Manual disk encryption on Ubuntu</title><link>https://agren.cc/p/manual-disk-encryption/</link><pubDate>Sat, 03 Dec 2022 15:00:00 +0200</pubDate><guid>https://agren.cc/p/manual-disk-encryption/</guid><description>Ubuntu makes it very easy to set up full disk encryption, but it requires you to wipe the entire disk if you want the wizard to do it for you, so this is how you can set it up manually.</description><content>&lt;p>Ubuntu makes it very easy to set up full disk encryption, but it requires you to wipe the entire disk if you want the wizard to do it for you, so this is how you can set it up manually.&lt;/p>
&lt;p>One common reason you may want to do this is in a dual boot scenario, where one or several leading partitions are already taken &amp;ndash; or maybe you simply want to keep whatever is there.&lt;/p>
&lt;p>The option in the Ubuntu installer to &lt;em>&amp;ldquo;Encrypt the new Ubuntu installation for security&amp;rdquo;&lt;/em> is only available when choosing &lt;em>&amp;ldquo;Erase disk and install Ubuntu&amp;rdquo;&lt;/em>. So, if you don&amp;rsquo;t want to wipe the entire disk, but you still want to boot an encrypted root partition, it needs some preparation.&lt;/p>
&lt;p>This also gives some useful insight into how the disk encryption is actually set up behind the scenes.&lt;/p>
&lt;p>In this guide we will:&lt;/p>
&lt;ul>
&lt;li>Set up the partitions we want manually using &lt;code>sgdisk&lt;/code> &amp;ndash; but you can use &lt;code>gparted&lt;/code> or similar if you prefer.&lt;/li>
&lt;li>Use &lt;code>cryptsetup&lt;/code> to encrypt a partition&lt;/li>
&lt;li>Decrypt (open) and mount this encrypted device, and set up LVM within it&lt;/li>
&lt;li>Have Ubuntu run its installation against the unlocked partition, like any normal installation.&lt;/li>
&lt;li>Manually configure the new installation to prompt the user for a passphrase to unlock the device on boot&lt;/li>
&lt;/ul>
&lt;p>This may sound like a lot, but it&amp;rsquo;s pretty straight forward.&lt;/p>
&lt;p>This guide assumes that you already have, or that you will create, an EFI system partition. This is outside the scope of the guide.&lt;/p>
&lt;p>&lt;em>Note: This post is heavily inspired by &lt;a href="https://www.mikekasberg.com/blog/2020/04/08/dual-boot-ubuntu-and-windows-with-encryption.html">this post&lt;/a> by Mike Kasberg.&lt;/em>&lt;/p>
&lt;h3 id="graphical-representation">Graphical representation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">| ### sda1 ### | ## sda2 ## | ######### sda3 ######### | -,
^-untouched ^-/boot ^- LUKS LVM (encrypted) |
|
| ####################### sda3 ####################### | &amp;lt;Â´
| ## swap (lv) ## | ########### root (lv) ########### |
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;p>In this example, &lt;code>/dev/sda1&lt;/code> is taken and we do not want to remove it. After &lt;code>sda1&lt;/code>, there is free space available. You may very well have multiple partitions &amp;ldquo;taken&amp;rdquo;. If so, the partitions you create might be &lt;code>sda5&lt;/code>, or &lt;code>sda6&lt;/code> etc.&lt;/p>
&lt;h3 id="partitions">Partitions&lt;/h3>
&lt;p>First, create a &lt;code>2G&lt;/code> partition for /boot (we&amp;rsquo;re not encrypting this) on &lt;code>/dev/sda&lt;/code> as partition &lt;code>2&lt;/code>, which is the next free partition number available in this example where only &lt;code>sda1&lt;/code> exists.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># sgdisk --new=2:0:+2G /dev/sda
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let the next partition &lt;code>3&lt;/code> fill the remaining space:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># sgdisk --new=3:0:0 /dev/sda
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now set the name of &lt;code>2&lt;/code> to /boot and &lt;code>3&lt;/code> to rootfs&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># sgdisk --change-name=2:/boot --change-name=3:rootfs /dev/sda
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then set the typecode to 8300 on both (Linux filesystem)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># sgdisk --typecode=2:8300 --typecode=3:8300 /dev/sda
&lt;/code>&lt;/pre>&lt;/div>&lt;p>At this point, we&amp;rsquo;re going to use LUKS to encrypt what will later become our root disk (&lt;code>sda3&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># cryptsetup luksFormat --type=luks1 /dev/sda3
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then open it with the passphrase you chose and call it &amp;ldquo;root&amp;rdquo;, or whatever really:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># cryptsetup open /dev/sda3 root
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The naming &lt;code>root&lt;/code> makes the unlocked device available at &lt;code>/dev/mapper/root&lt;/code>&lt;/p>
&lt;h3 id="lvm">LVM&lt;/h3>
&lt;p>We can now treat this meta-device as a regular HDD and create a physical volume for LVM as you would normally:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># pvcreate /dev/mapper/root
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create a volume group, then one logical volume for swap, and use the rest for our root partition.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># vgcreate ubuntu-vg /dev/mapper/root
# lvcreate -L 4G -n swap ubuntu-vg
# lvcreate -l 100%FREE -n root ubuntu-vg
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="install-ubuntu">Install Ubuntu&lt;/h3>
&lt;p>Since this encrypted device is already unlocked and LVM has been prepared, we can use the normal GUI installation in Ubuntu to install into it.&lt;/p>
&lt;p>If you want to double check at this point, you can run &lt;code>gparted&lt;/code> as root which should show the partitions you just created.&lt;/p>
&lt;p>Start the regular Ubuntu installation, select language, keyboard layout etc. and then select &amp;ldquo;Something else&amp;rdquo; when asked about how you want to install.&lt;/p>
&lt;p>Here&amp;rsquo;s what we&amp;rsquo;ll do in the installation GUI:&lt;/p>
&lt;ul>
&lt;li>Edit /dev/mapper/ubuntu&amp;ndash;vg-root, set to ext4 mounted at /, and format it.&lt;/li>
&lt;li>Edit /dev/mapper/ubuntu&amp;ndash;vg-swap, set to swap area.&lt;/li>
&lt;li>Edit /dev/sda2, set to ext4 mounted at /boot, and format it.&lt;/li>
&lt;/ul>
&lt;p>Let the installation complete, but &amp;ndash; &lt;strong>do not&lt;/strong> &amp;ndash; reboot or shut down the installation (select &amp;ldquo;Continue Testing&amp;rdquo;).&lt;/p>
&lt;p>The reason we must keep the installation going is that the installation wizard does not understand that it has actually installed Ubuntu into an encrypted device, so we need to add some configuration to the installation we just did while it&amp;rsquo;s still open so that it will prompt the user for the passphrase to decrypt it.&lt;/p>
&lt;h3 id="chroot-into-the-installation">chroot into the installation&lt;/h3>
&lt;p>We&amp;rsquo;ll use &lt;code>/target&lt;/code> for mounting our installed system:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># mount /dev/mapper/ubuntu--vg-root /target
# mount /dev/sda2 /target/boot
# for n in proc sys dev etc/resolv.conf; do mount --rbind /$n /target/$n; done
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before jumping into it, we need to figure out the UUID (not PARTUUID) of the encrypted partition (/dev/sda3). This can be found by running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># blkid /dev/sda3
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Save this for later.&lt;/p>
&lt;p>Since &lt;code>/target&lt;/code> is now a usable environment, we can chroot to it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># chroot /target
# mount -a
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now create and edit &lt;code>/etc/crypttab&lt;/code> which likely does not exist and add the name for the device, the device itself (by UUID, no quotes) and some options:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">root UUID=your_uuid_here none luks,discard
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Save the file, then apply your changes by running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># update-initramfs -k all -c
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will re-generate your initrd images, and when done you&amp;rsquo;re ready to reboot. After the reboot, you should be greeted with a prompt asking you for the passphrase to decrypt &amp;ldquo;root&amp;rdquo;, and that&amp;rsquo;s it!&lt;/p></content></item><item><title>Encrypted LUKS file container</title><link>https://agren.cc/p/luks-file/</link><pubDate>Fri, 28 Oct 2022 15:59:51 +0200</pubDate><guid>https://agren.cc/p/luks-file/</guid><description>While Linux Unified Key Setup â LUKS â is mostly used to encrypt entire disks under Linux, it can also be used to easily create an encrypted file container.</description><content>&lt;p>While &lt;a href="https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup">Linux Unified Key Setup&lt;/a> â &lt;code>LUKS&lt;/code> â is mostly used to encrypt entire disks under Linux, it can also be used to easily create an encrypted file container. This can be used as an alternative to encrypting something like a &lt;code>.tar.gz&lt;/code> file directly, and will be easier to mount and read, without having to write decrypted data to disk.&lt;/p>
&lt;h3 id="creating-a-container">Creating a container&lt;/h3>
&lt;p>The first step is to quite simply reserve disk space for the container by creating an empty file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ dd if=/dev/zero of=container.luks bs=1 count=0 seek=2G
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This tells input file &lt;code>/dev/zero&lt;/code> to write &lt;code>2G&lt;/code> of its output (zeroes) to &lt;code>container.luks&lt;/code>.&lt;/p>
&lt;p>While it&amp;rsquo;s possible to use a &lt;a href="https://en.wikipedia.org/wiki/Keyfile">keyfile&lt;/a> for the encryption, in this example we will use a passphrase.&lt;/p>
&lt;p>Formatting this file as a &lt;code>LUKS&lt;/code> container is easy:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ cryptsetup -y -v luksFormat container.luks
WARNING!
========
This will overwrite data on container.luks irrevocably.
Are you sure? (Type &amp;#39;yes&amp;#39; in capital letters): YES
Enter passphrase for container.luks:
Verify passphrase:
Key slot 0 created.
Command successful.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The next step is to mount this file as a device, which requires us to be root.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ sudo cryptsetup luksOpen container.luks container
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This container is now available as a device (symlink) under &lt;code>/dev/mapper&lt;/code>, but since it&amp;rsquo;s completely empty we need to format it with a filesystem. You can probably use any filesystem you prefer, but in this case we&amp;rsquo;ll go for &lt;code>ext4&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ sudo mkfs.ext4 /dev/mapper/container
mke2fs 1.46.5 (30-Dec-2021)
Creating filesystem with 520192 4k blocks and 130048 inodes
(...)
Writing superblocks and filesystem accounting information: done
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The device is now formatted and ready to use.&lt;/p>
&lt;h3 id="mounting">Mounting&lt;/h3>
&lt;p>You can either rely on the auto-mount, typically this will make the encrypted container available after running &lt;code>luksOpen&lt;/code> at a path like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">/run/media/your_name/g-u-i-d
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The easiest way to get to this is to open your file explorer, as it will usually show in the left hand column.&lt;/p>
&lt;p>If you want to mount it somewhere else however, you first need to make sure that path exists.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ mkdir /mnt/container
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If &lt;code>luksOpen&lt;/code> has completed, the device is available to mount as &lt;code>root&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ sudo mount /dev/mapper/container /mnt/container
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since manual mounting happens as &lt;code>root&lt;/code>, we need to fix our permissions. This sets &lt;code>$ME&lt;/code> to the current user, and sets ownerships with that variable:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ ME=&amp;#34;$(whoami)&amp;#34; &amp;amp;&amp;amp; sudo chown -Rv $ME:$ME /mnt/container
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When you&amp;rsquo;re done with the container, simply unmount it and use &lt;code>luksClose&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ sudo umount /dev/mapper/container &amp;amp;&amp;amp; sudo cryptsetup luksClose container
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Linux Sysadmin Scratchpad</title><link>https://agren.cc/p/scratchpad/</link><pubDate>Sat, 24 Sep 2022 12:51:00 +0200</pubDate><guid>https://agren.cc/p/scratchpad/</guid><description>This page is a collection of useful commands or one-liners collected through the years.</description><content>&lt;p>This page is a collection of useful commands or one-liners collected through the years. They are sorted in general categories, but I&amp;rsquo;ve attempted to describe them as well as I can so hopefully CTRL+F will work decently if you know what you&amp;rsquo;re looking for.&lt;/p>
&lt;p>This post will be updated in-place, refer to the date above.&lt;/p>
&lt;h2 id="converting-unix-epoch-time">Converting Unix epoch time&lt;/h2>
&lt;p>If &lt;code>1660000000&lt;/code> doesn&amp;rsquo;t tell you much, here&amp;rsquo;s a few conversion examples:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ echo 1660000000 | perl -pe &amp;#39;use POSIX qw/strftime/; \
s/(\d{10})/strftime(&amp;#34;%Y-%m-%d %H:%M:%S&amp;#34;,localtime($1))/e&amp;#39;
2022-08-09 01:06:40
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that this prints &lt;code>localtime()&lt;/code> which depends on your system, and looks for exactly 10 numbers.&lt;/p>
&lt;p>If you have a log that begins with a very specific epoch timestamp syntax (nagios) this is an alternative way of doing it that also looks for brackets:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ echo &amp;#34;[1660000000] foo&amp;#34; | perl -pe &amp;#39;s/\[(\d{10})]/localtime($1)/e&amp;#39;
Tue Aug 9 01:06:40 2022 foo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can combine it with the above to get ISO-timestamps instead.&lt;/p>
&lt;h2 id="print-a-config-file-but-remove-all-comments--and-empty-rows">Print a config file, but remove all comments (#) and empty rows&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">grep -vE &amp;#39;^[[:space:]]*#|^$&amp;#39; file
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="poor-mans-jq">Poor man&amp;rsquo;s jq&lt;/h2>
&lt;p>If you&amp;rsquo;re on a system without jq but you&amp;rsquo;re just looking to make a json blob readable, you can use python&amp;rsquo;s json.tool instead:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ echo &amp;#39;{&amp;#34;bax&amp;#34;:{&amp;#34;foo&amp;#34;:&amp;#34;bar&amp;#34;,&amp;#34;baz&amp;#34;:[&amp;#34;ba&amp;#34;,&amp;#34;ba&amp;#34;,&amp;#34;ba&amp;#34;]}}&amp;#39; | python -m json.tool
{
&amp;#34;bax&amp;#34;: {
&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;,
&amp;#34;baz&amp;#34;: [
&amp;#34;ba&amp;#34;,
&amp;#34;ba&amp;#34;,
&amp;#34;ba&amp;#34;
]
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="replace-every-instance-of-x-in-a-file">Replace every instance of x in a file&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">sed -i &amp;#39;s/val=foo/val=bar/g&amp;#39; /etc/file
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="show-frequently-recurring-lines-in-a-log-file">Show frequently recurring lines in a log file&lt;/h2>
&lt;p>If you know that the timestamp is 14 characters long, this will cut out the timestamp and show you a count of the worst offenders:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">cat file.log | cut -c14- | sort | uniq -c | sort | tail
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="test-outbound-connectivity-on-a-specific-port">Test outbound connectivity on a specific port&lt;/h2>
&lt;p>Single port, or range of:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">nc -zv host 80
nc -zv host 20-30
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="time-travel">Time travel&lt;/h2>
&lt;p>If your testing depends on the system clock being wrong, you can disable NTP and set it to whatever like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># timedatectl set-ntp 0
# timedatectl set-time &amp;#39;2016-12-13 13:45&amp;#39;
# date
Tue Dec 13 13:45:01 WST 2016
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To re-enable NTP:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">timedatectl set-ntp 1 &amp;amp;&amp;amp; timedatectl --adjust-system-clock
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="push-a-thousand-things-to-an-apiconfig-file">Push a thousand things to an API/config file&lt;/h2>
&lt;p>Useful for load testing, or just filling up a bunch of garbage.&lt;/p>
&lt;ul>
&lt;li>&lt;code>JSON_DATA_OBJECT&lt;/code>: What you want to send to the API, in this case assumed JSON. If you need certain fields to be random, you could fill them with &lt;code>$(cat /proc/sys/kernel/random/uuid)&lt;/code> for example.&lt;/li>
&lt;/ul>
&lt;p>The response is assumed to be JSON and piped for formatting.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="k">for&lt;/span> i in &lt;span class="k">$(&lt;/span>seq &lt;span class="m">1&lt;/span> 1001&lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
curl -sk -H &lt;span class="s1">&amp;#39;content-type: application/json&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -d &lt;span class="s1">&amp;#39;JSON_DATA_OBJECT&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;https://url/api&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -u &lt;span class="s1">&amp;#39;user:password&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> python -m json.tool
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you need to do a &lt;code>POST&lt;/code> or some other type of request with no data to apply the change, just pass &lt;code>-X POST&lt;/code> instead of &lt;code>-d&lt;/code>ata.&lt;/p>
&lt;h4 id="config-file">Config file&lt;/h4>
&lt;p>To create a bunch of blocks with the expected syntax (here it&amp;rsquo;s nagios), you can do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="nb">cd&lt;/span> /somewhere
&lt;span class="k">for&lt;/span> i in &lt;span class="k">$(&lt;/span>seq &lt;span class="m">1&lt;/span> 10001&lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nv">UUID&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>cat /proc/sys/kernel/random/uuid&lt;span class="k">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;define host {
&lt;/span>&lt;span class="s2"> use default-host-template
&lt;/span>&lt;span class="s2"> host_name &lt;/span>&lt;span class="nv">$UUID&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> address 127.0.0.1
&lt;/span>&lt;span class="s2"> register 1
&lt;/span>&lt;span class="s2"> }&amp;#34;&lt;/span> &amp;gt;&amp;gt; hosts.cfg
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="sort-a-file-alphabetically-by-object-name-not-by-line">Sort a file alphabetically by object name, not by line&lt;/h2>
&lt;p>Assume you have this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">gamma {
banana
}
alpha {
apple
pear
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>How do you sort this alphabetically by &lt;code>object{}&lt;/code>, not by line? There&amp;rsquo;s always a million ways, but one way to do it is to replace all linebreaks with some kind of unique placeholder character that appears nowhere in the file, like &lt;code>Â§&lt;/code>. This can be done in &lt;code>vim&lt;/code> with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">:%g/.*{$/;/^}$/s/\n/Â§/
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This gives us:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">gamma {Â§ bananaÂ§}Â§
alpha {Â§ appleÂ§ pearÂ§}Â§
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that this only works if &lt;code>}&lt;/code> also has a newline after it. You can now sort it normally:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">:%sort
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When it&amp;rsquo;s all sorted, restore the newlines by replacing the &lt;code>Â§&lt;/code> characters:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">:g/.*{/s/Â§/\r/g
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="create-tar-on-a-remote-system-but-compress-it-locally">Create TAR on a remote system, but compress it locally&lt;/h2>
&lt;p>When bandwidth isn&amp;rsquo;t the issue and you don&amp;rsquo;t want to use up any space on the remote system, you may want to do the compression yourself locally and stream the tarball. If &lt;code>sudo&lt;/code> is required, you can put it in a variable, but note that it will show up in the process list as long as the command is running.&lt;/p>
&lt;p>&lt;code>2&amp;gt;/dev/null&lt;/code> will hide the sudo prompt.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ read -s sudopass
$ ssh you@host &amp;#34;echo $sudopass | \
sudo -S tar cf - /dir&amp;#34; 2&amp;gt;/dev/null | \
XZ_OPT=&amp;#39;-9 -T0 -v&amp;#39; xz &amp;gt; dir.txz
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Verify that the file has contents:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ tar tvf dir.txz | head
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also do the same only for a specific subset of files, for example all log files:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ ssh you@host &amp;#34;echo $sudopass | \
sudo -S find &amp;#39;/dir&amp;#39; -name &amp;#39;*.log&amp;#39; | \
sudo tar -cf- -T-&amp;#34; | \
XZ_OPT=&amp;#39;-9 -T0 -v&amp;#39; xz &amp;gt; logs.txz
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="encrypt-a-file-with-openssl">Encrypt a file with OpenSSL&lt;/h2>
&lt;p>If you&amp;rsquo;re going to be throwing logs across the internet, it&amp;rsquo;s probably a good idea to encrypt the file. One way to do this is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ openssl enc -e -aes-256-cbc -md sha512 -pbkdf2 \
-iter 10000 -in [PLAIN_FILE] -out [ENCRYPTED_FILE]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It will ask you for a passphrase. To decrypt, use the &lt;code>-d&lt;/code> flag in an otherwise very similar command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ openssl enc -d -aes-256-cbc -md sha512 -pbkdf2 \
-iter 10000 -in [ENCRYPTED_FILE] -out [PLAIN_FILE]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Enter your passphrase and you&amp;rsquo;ll have the decrypted file ready for decompression.&lt;/p>
&lt;h2 id="bash">Bash&lt;/h2>
&lt;p>Since &lt;code>!!&lt;/code> refers to the previous command, you can re-run a failed command as root with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ sudo !!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So-called &lt;em>brace expansion&lt;/em> is commonly used to move or copy one or many files as backups:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ mv -v file{,.bak}
renamed &amp;#39;file&amp;#39; -&amp;gt; &amp;#39;file.bak&amp;#39;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For multiple files, &lt;code>find&lt;/code> with &lt;code>-exec&lt;/code> is a lot more flexible:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ touch fakelog{1..10}.log # create 10 fake log files
$ find . -type f -name &amp;#39;*.log&amp;#39; # find all *.log files recursively
# now execute &amp;#39;mv -v fakelog{1..10}.log fakelog{1..10}.log.bak&amp;#39; for every file found
$ find . -type f -name &amp;#39;*.log&amp;#39; -exec mv -v {} {}.bak \;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Final advice&lt;/strong> for everything bash:&lt;/p>
&lt;p>Use &lt;a href="https://github.com/koalaman/shellcheck">shellcheck&lt;/a> when writing scripts, available as an extension in most editors. The &lt;a href="https://google.github.io/styleguide/shellguide.html">Google Shell Style Guide&lt;/a> isn&amp;rsquo;t bad either.&lt;/p>
&lt;h2 id="product-specific-salt-stack">Product-specific: Salt-stack&lt;/h2>
&lt;p>If you don&amp;rsquo;t use &lt;a href="https://saltproject.io/whats-saltstack/">salt&lt;/a>, you can disregard this section.&lt;/p>
&lt;h4 id="filtering-by-grains-and-listing-grains">Filtering by grains, and listing grains&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># salt -C &amp;#39;prefix-* and G@osmajorrelease:14&amp;#39; grains.get &amp;#39;osrelease&amp;#39;
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="apply-a-state-only-to-nodes-that-have-it">Apply a state only to nodes that have it&lt;/h4>
&lt;p>Get all states for a specific group of nodes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># salt &amp;#39;prefix-*&amp;#39; state.show_lowstate --out=json &amp;gt; out.json
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Use &lt;code>jq&lt;/code> to only return nodes that have a specific &lt;code>state&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">cat out.json | \
jq -r &amp;#39;select(.[][].__sls__ == &amp;#34;state&amp;#34;) | keys[]&amp;#39; | \
sort -u
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wrangle this string to make it into a salt-compatible list (comma-separated), and then use that, ping to check before trying &lt;code>state.apply&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">sudo salt -L &amp;#39;host,host,host&amp;#39; test.ping
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>fail2ban on EL8</title><link>https://agren.cc/p/fail2ban-on-el8/</link><pubDate>Fri, 08 Oct 2021 15:30:51 +0200</pubDate><guid>https://agren.cc/p/fail2ban-on-el8/</guid><description>fail2ban is commonly used to take a certain action, such as automatically blocking an IP, after repeated authentication failures or other generally bad behavior against applications, as detected by regex matching against log output.</description><content>&lt;p>fail2ban is commonly used to take a certain action, such as automatically blocking an IP, after repeated authentication failures or other generally bad behavior against applications, as detected by regex matching against log output.&lt;/p>
&lt;p>This example will show how to install and configure fail2ban on EL8 (Rocky Linux 8.4), and to configure it to block an IP after multiple failed login attempts.&lt;/p>
&lt;h4 id="installing-fail2ban-via-epel">Installing fail2ban via EPEL&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
# yum install fail2ban
# fail2ban-client --version
Fail2Ban v0.11.2
# systemctl enable fail2ban --now
# fail2ban-client status
Status
|- Number of jail: 0
`- Jail list:
&lt;/code>&lt;/pre>&lt;/div>&lt;p>At this point, fail2ban is installed and running, but does not have any active jails. The first step is therefore to enable the jails we want, which is done by copying the default file in &lt;code>/etc/fail2ban&lt;/code> called &lt;code>jail.conf&lt;/code> to &lt;code>jail.local&lt;/code>, which is the fail2ban syntax for a user-defined override file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># cp jail.conf jail.local &amp;amp;&amp;amp; vim jail.local
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since all the commented help text is still available in &lt;code>jail.conf&lt;/code>, we can make our override file short and sweet. The options should be pretty self-explanatory:
&lt;div class="collapsable-code">
&lt;input id="1" type="checkbox" />
&lt;label for="1">
&lt;span class="collapsable-code__language">cfg&lt;/span>
&lt;span class="collapsable-code__title">jail.local&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-cfg" >&lt;code>
[DEFAULT]
bantime = 24h
maxretry = 3
findtime = 60m
backend = systemd
banaction = nftables[type=allports]
[sshd]
enabled = true
&lt;/code>&lt;/pre>
&lt;/div>
This will ban an IP for &lt;code>24h&lt;/code> if &lt;code>3&lt;/code> failed attempts happen within &lt;code>60m&lt;/code>. The IP will be banned on all ports and is actioned through &lt;code>nftables&lt;/code>.&lt;/p>
&lt;p>When the file is saved, let&amp;rsquo;s restart fail2ban and verify that the jail is active:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># systemctl restart fail2ban
# fail2ban-client status
Status
|- Number of jail: 1
`- Jail list: sshd
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="trust-but-verify">Trust, but verify&lt;/h4>
&lt;p>Now let&amp;rsquo;s do something dumb and enable passwords for SSH authentication, then attempt to get ourselves banned when failing to login from &lt;code>127.0.0.1&lt;/code>. First, ensure password authentication is enabled in &lt;code>/etc/ssh/sshd_config&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">PasswordAuthentication yes
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Restart the SSH daemon:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># systemctl restart sshd
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Attempt an SSH login with an incorrect password:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># ssh localhost -P
root@localhost&amp;#39;s password:
Permission denied, please try again.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This failed attempt should now be visible in &lt;code>/var/log/secure&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">unix_chkpwd[1373]: password check failed for user (root)
sshd[1371]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 .0.1 user=root
sshd[1371]: Failed password for root from 127.0.0.1 port 37780 ssh2
sshd[1371]: Connection closed by authenticating user root 127.0.0.1 port 37780 [preauth]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This very serious breach attempt was naively ignored by fail2ban though, as visible in &lt;code>/var/log/fail2ban.log&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">fail2ban.filter [1305]: INFO [sshd] Ignore 127.0.0.1 by ignoreself rule
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Luckily, this is something we can override in our &lt;code>jail.local&lt;/code> file by setting &lt;code>ignoreself = false&lt;/code> under &lt;code>[DEFAULT]&lt;/code>. After restarting fail2ban, repeated attempts gives us this in &lt;code>fail2ban.log&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">fail2ban.filter [1451]: INFO [sshd] Found 127.0.0.1 - 2021-10-08 14:38:01
fail2ban.filter [1451]: INFO [sshd] Found 127.0.0.1 - 2021-10-08 14:38:49
fail2ban.filter [1451]: INFO [sshd] Found 127.0.0.1 - 2021-10-08 14:38:51
fail2ban.actions [1451]: NOTICE [sshd] Ban 127.0.0.1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Congratulations, you&amp;rsquo;ve banned yourself:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># fail2ban-client banned
[{&amp;#39;sshd&amp;#39;: [&amp;#39;127.0.0.1&amp;#39;]}]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Clearing all bans:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># fail2ban-client unban --all
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="summary">Summary&lt;/h4>
&lt;p>What we&amp;rsquo;ve done:&lt;/p>
&lt;ul>
&lt;li>We created a &lt;code>jail.local&lt;/code> override file with our own settings.&lt;/li>
&lt;li>We enabled the &lt;code>sshd&lt;/code> jail, and there are of course others ready to use for other services.&lt;/li>
&lt;li>We verified that repeatedly failing to log in did add the firewall rule correctly, and that fail2ban could clear it.&lt;/li>
&lt;/ul></content></item></channel></rss>
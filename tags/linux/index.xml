<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on agren.cc</title>
    <link>https://agren.cc/tags/linux/</link>
    <description>Recent content in linux on agren.cc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 13 Sep 2023 19:08:00 +0200</lastBuildDate><atom:link href="https://agren.cc/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using curl to pass videos to VLC on Apple TV</title>
      <link>https://agren.cc/p/curl-to-vlc/</link>
      <pubDate>Wed, 13 Sep 2023 19:08:00 +0200</pubDate>
      
      <guid>https://agren.cc/p/curl-to-vlc/</guid>
      <description>VLC has always been a great piece of software, but one place where is really shines is on iOS/tvOS since it allows you to play pretty much any video file, and you can send that file over curl.</description>
      <content>&lt;p&gt;VLC has always been a great piece of software, but one place where is
really shines is on iOS/tvOS since it allows you to play pretty much any
video file, and you can send that file over curl.&lt;/p&gt;
&lt;p&gt;While this probably also works for iOS, this example will focus on the
use case of downloading a YouTube video, stripping it of sponsored
content and passing it on to VLC on an Apple TV. It&amp;rsquo;s not that difficult, but you do
need &lt;a href=&#34;https://github.com/yt-dlp/yt-dlp&#34;&gt;&lt;code&gt;yt-dlp&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;ffmpeg&lt;/code&gt; and &lt;code&gt;curl&lt;/code&gt;:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;bash&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;tovlc.sh&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-bash&#34; &gt;&lt;code&gt;#!/bin/bash
/usr/bin/yt-dlp $1 -o output.mkv \
--sponsorblock-remove all \
--force-overwrites \
--merge-output-format mkv \
--embed-subs \
&amp;amp;&amp;amp; /usr/bin/curl -i \
-X POST &amp;#39;http://appletv.local/upload.json&amp;#39; \
--form file=&amp;#39;@output.mkv&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;This will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;yt-dlp&lt;/code&gt; to download the video at the url passed as the argument
to the script (&lt;code&gt;$1&lt;/code&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remove any sponsored content&lt;/li&gt;
&lt;li&gt;Overwrite the output.mkv file if it already exists&lt;/li&gt;
&lt;li&gt;Change the container to &lt;code&gt;mkv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Embed any subtitles found&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send a &lt;code&gt;POST&lt;/code&gt; request to VLC using
&lt;a href=&#34;https://curl.se/docs/manpage.html#-F&#34;&gt;&lt;code&gt;--form&lt;/code&gt;&lt;/a&gt; to send the binary
contents of the file as &lt;code&gt;file&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Having this script executable as &lt;code&gt;tovlc&lt;/code&gt; in &lt;code&gt;/usr/bin&lt;/code&gt; for example
will allow you to then run things like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ tovlc https://www.youtube.com/watch?v=foeov6Ahi4Y
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note: I tried having &lt;code&gt;yt-dlp&lt;/code&gt; passing the output to stdout with &lt;code&gt;-o -&lt;/code&gt;
followed by a pipe to curl with &lt;code&gt;--form file=&#39;@-&#39;&lt;/code&gt;, while this should
work in theory I couldn&amp;rsquo;t get it to work, so the above will require
enough disk space to store the file before sending it to VLC.&lt;/p&gt;
&lt;h2 id=&#34;additional-reading&#34;&gt;Additional reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yt-dlp/yt-dlp#usage-and-options&#34;&gt;yt-dlp usage and options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Manual disk encryption on Ubuntu</title>
      <link>https://agren.cc/p/manual-disk-encryption/</link>
      <pubDate>Sat, 03 Dec 2022 15:00:00 +0200</pubDate>
      
      <guid>https://agren.cc/p/manual-disk-encryption/</guid>
      <description>Ubuntu makes it very easy to set up full disk encryption, but it requires you to wipe the entire disk if you want the wizard to do it for you, so this is how you can set it up manually.</description>
      <content>&lt;p&gt;Ubuntu makes it very easy to set up full disk encryption, but it requires you to wipe the entire disk if you want the wizard to do it for you, so this is how you can set it up manually.&lt;/p&gt;
&lt;p&gt;One common reason you may want to do this is in a dual boot scenario, where one or several leading partitions are already taken &amp;ndash; or maybe you simply want to keep whatever is there.&lt;/p&gt;
&lt;p&gt;The option in the Ubuntu installer to &lt;em&gt;&amp;ldquo;Encrypt the new Ubuntu installation for security&amp;rdquo;&lt;/em&gt; is only available when choosing &lt;em&gt;&amp;ldquo;Erase disk and install Ubuntu&amp;rdquo;&lt;/em&gt;. So, if you don&amp;rsquo;t want to wipe the entire disk, but you still want to boot an encrypted root partition, it needs some preparation.&lt;/p&gt;
&lt;p&gt;This also gives some useful insight into how the disk encryption is actually set up behind the scenes.&lt;/p&gt;
&lt;p&gt;In this guide we will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set up the partitions we want manually using &lt;code&gt;sgdisk&lt;/code&gt; &amp;ndash; but you can use &lt;code&gt;gparted&lt;/code&gt; or similar if you prefer.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;cryptsetup&lt;/code&gt; to encrypt a partition&lt;/li&gt;
&lt;li&gt;Decrypt (open) and mount this encrypted device, and set up LVM within it&lt;/li&gt;
&lt;li&gt;Have Ubuntu run its installation against the unlocked partition, like any normal installation.&lt;/li&gt;
&lt;li&gt;Manually configure the new installation to prompt the user for a passphrase to unlock the device on boot&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This may sound like a lot, but it&amp;rsquo;s pretty straight forward.&lt;/p&gt;
&lt;p&gt;This guide assumes that you already have, or that you will create, an EFI system partition. This is outside the scope of the guide.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: This post is heavily inspired by &lt;a href=&#34;https://www.mikekasberg.com/blog/2020/04/08/dual-boot-ubuntu-and-windows-with-encryption.html&#34;&gt;this post&lt;/a&gt; by Mike Kasberg.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;graphical-representation&#34;&gt;Graphical representation&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;| ### sda1 ### | ## sda2 ## | ######### sda3 ######### | -,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ^-untouched    ^-/boot       ^- LUKS LVM (encrypted)    |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                                          |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;| ####################### sda3 ####################### | &amp;lt;Â´
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;| ## swap (lv) ## | ###########  root (lv) ########### |
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;In this example, &lt;code&gt;/dev/sda1&lt;/code&gt; is taken and we do not want to remove it. After &lt;code&gt;sda1&lt;/code&gt;, there is free space available. You may very well have multiple partitions &amp;ldquo;taken&amp;rdquo;. If so, the partitions you create might be &lt;code&gt;sda5&lt;/code&gt;, or &lt;code&gt;sda6&lt;/code&gt; etc.&lt;/p&gt;
&lt;h3 id=&#34;partitions&#34;&gt;Partitions&lt;/h3&gt;
&lt;p&gt;First, create a &lt;code&gt;2G&lt;/code&gt; partition for /boot (we&amp;rsquo;re not encrypting this) on &lt;code&gt;/dev/sda&lt;/code&gt; as partition &lt;code&gt;2&lt;/code&gt;, which is the next free partition number available in this example where only &lt;code&gt;sda1&lt;/code&gt; exists.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# sgdisk --new=2:0:+2G /dev/sda
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let the next partition &lt;code&gt;3&lt;/code&gt; fill the remaining space:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# sgdisk --new=3:0:0 /dev/sda
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now set the name of &lt;code&gt;2&lt;/code&gt; to /boot and &lt;code&gt;3&lt;/code&gt; to rootfs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# sgdisk --change-name=2:/boot --change-name=3:rootfs /dev/sda
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then set the typecode to 8300 on both (Linux filesystem)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# sgdisk --typecode=2:8300 --typecode=3:8300 /dev/sda
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At this point, we&amp;rsquo;re going to use LUKS to encrypt what will later become our root disk (&lt;code&gt;sda3&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# cryptsetup luksFormat --type=luks1 /dev/sda3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then open it with the passphrase you chose and call it &amp;ldquo;root&amp;rdquo;, or whatever really:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# cryptsetup open /dev/sda3 root
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The naming &lt;code&gt;root&lt;/code&gt; makes the unlocked device available at &lt;code&gt;/dev/mapper/root&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;lvm&#34;&gt;LVM&lt;/h3&gt;
&lt;p&gt;We can now treat this meta-device as a regular HDD and create a physical volume for LVM as you would normally:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# pvcreate /dev/mapper/root
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a volume group, then one logical volume for swap, and use the rest for our root partition.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# vgcreate ubuntu-vg /dev/mapper/root
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# lvcreate -L 4G -n swap ubuntu-vg
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# lvcreate -l 100%FREE -n root ubuntu-vg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;install-ubuntu&#34;&gt;Install Ubuntu&lt;/h3&gt;
&lt;p&gt;Since this encrypted device is already unlocked and LVM has been prepared, we can use the normal GUI installation in Ubuntu to install into it.&lt;/p&gt;
&lt;p&gt;If you want to double check at this point, you can run &lt;code&gt;gparted&lt;/code&gt; as root which should show the partitions you just created.&lt;/p&gt;
&lt;p&gt;Start the regular Ubuntu installation, select language, keyboard layout etc. and then select &amp;ldquo;Something else&amp;rdquo; when asked about how you want to install.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what we&amp;rsquo;ll do in the installation GUI:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Edit /dev/mapper/ubuntu&amp;ndash;vg-root, set to ext4 mounted at /, and format it.&lt;/li&gt;
&lt;li&gt;Edit /dev/mapper/ubuntu&amp;ndash;vg-swap, set to swap area.&lt;/li&gt;
&lt;li&gt;Edit /dev/sda2, set to ext4 mounted at /boot, and format it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let the installation complete, but &amp;ndash; &lt;strong&gt;do not&lt;/strong&gt; &amp;ndash; reboot or shut down the installation (select &amp;ldquo;Continue Testing&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;The reason we must keep the installation going is that the installation wizard does not understand that it has actually installed Ubuntu into an encrypted device, so we need to add some configuration to the installation we just did while it&amp;rsquo;s still open so that it will prompt the user for the passphrase to decrypt it.&lt;/p&gt;
&lt;h3 id=&#34;chroot-into-the-installation&#34;&gt;chroot into the installation&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ll use &lt;code&gt;/target&lt;/code&gt; for mounting our installed system:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# mount /dev/mapper/ubuntu--vg-root /target
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# mount /dev/sda2 /target/boot
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# for n in proc sys dev etc/resolv.conf; do mount --rbind /$n /target/$n; done
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before jumping into it, we need to figure out the UUID (not PARTUUID) of the encrypted partition (/dev/sda3). This can be found by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# blkid /dev/sda3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Save this for later.&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;/target&lt;/code&gt; is now a usable environment, we can chroot to it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# chroot /target
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# mount -a 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now create and edit &lt;code&gt;/etc/crypttab&lt;/code&gt; which likely does not exist and add the name for the device, the device itself (by UUID, no quotes) and some options:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root UUID=your_uuid_here none luks,discard
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Save the file, then apply your changes by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# update-initramfs -k all -c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will re-generate your initrd images, and when done you&amp;rsquo;re ready to reboot. After the reboot, you should be greeted with a prompt asking you for the passphrase to decrypt &amp;ldquo;root&amp;rdquo;, and that&amp;rsquo;s it!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Linux Sysadmin Scratchpad</title>
      <link>https://agren.cc/p/scratchpad/</link>
      <pubDate>Sat, 24 Sep 2022 12:51:00 +0200</pubDate>
      
      <guid>https://agren.cc/p/scratchpad/</guid>
      <description>This page is a collection of useful commands or one-liners collected through the years.</description>
      <content>&lt;p&gt;This page is a collection of useful commands or one-liners collected through the years. They are sorted in general categories, but I&amp;rsquo;ve attempted to describe them as well as I can so hopefully CTRL+F will work decently if you know what you&amp;rsquo;re looking for.&lt;/p&gt;
&lt;p&gt;This post will be updated in-place, refer to the date above.&lt;/p&gt;
&lt;h2 id=&#34;converting-unix-epoch-time&#34;&gt;Converting Unix epoch time&lt;/h2&gt;
&lt;p&gt;If &lt;code&gt;1660000000&lt;/code&gt; doesn&amp;rsquo;t tell you much, here&amp;rsquo;s a few conversion examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ echo 1660000000 | perl -pe &amp;#39;use POSIX qw/strftime/; \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;s/(\d{10})/strftime(&amp;#34;%Y-%m-%d %H:%M:%S&amp;#34;,localtime($1))/e&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2022-08-09 01:06:40
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that this prints &lt;code&gt;localtime()&lt;/code&gt; which depends on your system, and looks for exactly 10 numbers.&lt;/p&gt;
&lt;p&gt;If you have a log that begins with a very specific epoch timestamp syntax (nagios) this is an alternative way of doing it that also looks for brackets:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ echo &amp;#34;[1660000000] foo&amp;#34; | perl -pe &amp;#39;s/\[(\d{10})]/localtime($1)/e&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Tue Aug  9 01:06:40 2022 foo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can combine it with the above to get ISO-timestamps instead.&lt;/p&gt;
&lt;h2 id=&#34;print-a-config-file-but-remove-all-comments--and-empty-rows&#34;&gt;Print a config file, but remove all comments (#) and empty rows&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;grep -vE &amp;#39;^[[:space:]]*#|^$&amp;#39; file
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;poor-mans-jq&#34;&gt;Poor man&amp;rsquo;s jq&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re on a system without jq but you&amp;rsquo;re just looking to make a json blob readable, you can use python&amp;rsquo;s json.tool instead:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ echo &amp;#39;{&amp;#34;bax&amp;#34;:{&amp;#34;foo&amp;#34;:&amp;#34;bar&amp;#34;,&amp;#34;baz&amp;#34;:[&amp;#34;ba&amp;#34;,&amp;#34;ba&amp;#34;,&amp;#34;ba&amp;#34;]}}&amp;#39; | python -m json.tool
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;bax&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;baz&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &amp;#34;ba&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &amp;#34;ba&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &amp;#34;ba&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;replace-every-instance-of-x-in-a-file&#34;&gt;Replace every instance of x in a file&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sed -i &amp;#39;s/val=foo/val=bar/g&amp;#39; /etc/file
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;show-frequently-recurring-lines-in-a-log-file&#34;&gt;Show frequently recurring lines in a log file&lt;/h2&gt;
&lt;p&gt;If you know that the timestamp is 14 characters long, this will cut out the timestamp and show you a count of the worst offenders:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat file.log | cut -c14- | sort | uniq -c | sort | tail
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;test-outbound-connectivity-on-a-specific-port&#34;&gt;Test outbound connectivity on a specific port&lt;/h2&gt;
&lt;p&gt;Single port, or range of:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nc -zv host 80
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nc -zv host 20-30
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;time-travel&#34;&gt;Time travel&lt;/h2&gt;
&lt;p&gt;If your testing depends on the system clock being wrong, you can disable NTP and set it to whatever like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# timedatectl set-ntp 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# timedatectl set-time &amp;#39;2016-12-13 13:45&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# date
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Tue Dec 13 13:45:01 WST 2016
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To re-enable NTP:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;timedatectl set-ntp 1 &amp;amp;&amp;amp; timedatectl --adjust-system-clock
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;push-a-thousand-things-to-an-apiconfig-file&#34;&gt;Push a thousand things to an API/config file&lt;/h2&gt;
&lt;p&gt;Useful for load testing, or just filling up a bunch of garbage.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSON_DATA_OBJECT&lt;/code&gt;: What you want to send to the API, in this case assumed JSON. If you need certain fields to be random, you could fill them with &lt;code&gt;$(cat /proc/sys/kernel/random/uuid)&lt;/code&gt; for example.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The response is assumed to be JSON and piped for formatting.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; i in &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;seq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; 1001&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   curl -sk -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;content-type: application/json&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;JSON_DATA_OBJECT&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://url/api&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   -u &lt;span class=&#34;s1&#34;&gt;&amp;#39;user:password&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; python -m json.tool
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you need to do a &lt;code&gt;POST&lt;/code&gt; or some other type of request with no data to apply the change, just pass &lt;code&gt;-X POST&lt;/code&gt; instead of &lt;code&gt;-d&lt;/code&gt;ata.&lt;/p&gt;
&lt;h4 id=&#34;config-file&#34;&gt;Config file&lt;/h4&gt;
&lt;p&gt;To create a bunch of blocks with the expected syntax (here it&amp;rsquo;s nagios), you can do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /somewhere
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; i in &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;seq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; 10001&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;cat /proc/sys/kernel/random/uuid&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;define host {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    use                            default-host-template
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    host_name                      &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$UUID&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    address                        127.0.0.1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    register                       1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    }&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; hosts.cfg
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sort-a-file-alphabetically-by-object-name-not-by-line&#34;&gt;Sort a file alphabetically by object name, not by line&lt;/h2&gt;
&lt;p&gt;Assume you have this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gamma {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    banana
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;alpha {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    apple
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    pear
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How do you sort this alphabetically by &lt;code&gt;object{}&lt;/code&gt;, not by line? There&amp;rsquo;s always a million ways, but one way to do it is to replace all linebreaks with some kind of unique placeholder character that appears nowhere in the file, like &lt;code&gt;Â§&lt;/code&gt;. This can be done in &lt;code&gt;vim&lt;/code&gt; with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;:%g/.*{$/;/^}$/s/\n/Â§/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gives us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gamma {Â§    bananaÂ§}Â§ 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;alpha {Â§    appleÂ§    pearÂ§}Â§
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that this only works if &lt;code&gt;}&lt;/code&gt; also has a newline after it. You can now sort it normally:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;:%sort
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When it&amp;rsquo;s all sorted, restore the newlines by replacing the &lt;code&gt;Â§&lt;/code&gt; characters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;:g/.*{/s/Â§/\r/g
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;create-tar-on-a-remote-system-but-compress-it-locally&#34;&gt;Create TAR on a remote system, but compress it locally&lt;/h2&gt;
&lt;p&gt;When bandwidth isn&amp;rsquo;t the issue and you don&amp;rsquo;t want to use up any space on the remote system, you may want to do the compression yourself locally and stream the tarball. If &lt;code&gt;sudo&lt;/code&gt; is required, you can put it in a variable, but note that it will show up in the process list as long as the command is running.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;2&amp;gt;/dev/null&lt;/code&gt; will hide the sudo prompt.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ read -s sudopass
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh you@host &amp;#34;echo $sudopass | \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo -S tar cf - /dir&amp;#34; 2&amp;gt;/dev/null | \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;XZ_OPT=&amp;#39;-9 -T0 -v&amp;#39; xz &amp;gt; dir.txz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Verify that the file has contents:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ tar tvf dir.txz | head
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also do the same only for a specific subset of files, for example all log files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh you@host &amp;#34;echo $sudopass | \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo -S find &amp;#39;/dir&amp;#39; -name &amp;#39;*.log&amp;#39; | \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo tar -cf- -T-&amp;#34; | \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;XZ_OPT=&amp;#39;-9 -T0 -v&amp;#39; xz &amp;gt; logs.txz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;encrypt-a-file-with-openssl&#34;&gt;Encrypt a file with OpenSSL&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re going to be throwing logs across the internet, it&amp;rsquo;s probably a good idea to encrypt the file. One way to do this is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ openssl enc -e -aes-256-cbc -md sha512 -pbkdf2 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-iter 10000 -in [PLAIN_FILE] -out [ENCRYPTED_FILE]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It will ask you for a passphrase. To decrypt, use the &lt;code&gt;-d&lt;/code&gt; flag in an otherwise very similar command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ openssl enc -d -aes-256-cbc -md sha512 -pbkdf2 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-iter 10000 -in [ENCRYPTED_FILE] -out [PLAIN_FILE]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Enter your passphrase and you&amp;rsquo;ll have the decrypted file ready for decompression.&lt;/p&gt;
&lt;h2 id=&#34;bash&#34;&gt;Bash&lt;/h2&gt;
&lt;p&gt;Since &lt;code&gt;!!&lt;/code&gt; refers to the previous command, you can re-run a failed command as root with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo !!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So-called &lt;em&gt;brace expansion&lt;/em&gt; is commonly used to move or copy one or many files as backups:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ mv -v file{,.bak}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;renamed &amp;#39;file&amp;#39; -&amp;gt; &amp;#39;file.bak&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For multiple files, &lt;code&gt;find&lt;/code&gt; with &lt;code&gt;-exec&lt;/code&gt; is a lot more flexible:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ touch fakelog{1..10}.log          # create 10 fake log files
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ find . -type f -name &amp;#39;*.log&amp;#39;      # find all *.log files recursively
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# now execute &amp;#39;mv -v fakelog{1..10}.log fakelog{1..10}.log.bak&amp;#39; for every file found
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ find . -type f -name &amp;#39;*.log&amp;#39; -exec mv -v {} {}.bak \;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Final advice&lt;/strong&gt; for everything bash:&lt;/p&gt;
&lt;p&gt;Use &lt;a href=&#34;https://github.com/koalaman/shellcheck&#34;&gt;shellcheck&lt;/a&gt; when writing scripts, available as an extension in most editors. The &lt;a href=&#34;https://google.github.io/styleguide/shellguide.html&#34;&gt;Google Shell Style Guide&lt;/a&gt; isn&amp;rsquo;t bad either.&lt;/p&gt;
&lt;h2 id=&#34;product-specific-salt-stack&#34;&gt;Product-specific: Salt-stack&lt;/h2&gt;
&lt;p&gt;If you don&amp;rsquo;t use &lt;a href=&#34;https://saltproject.io/whats-saltstack/&#34;&gt;salt&lt;/a&gt;, you can disregard this section.&lt;/p&gt;
&lt;h4 id=&#34;filtering-by-grains-and-listing-grains&#34;&gt;Filtering by grains, and listing grains&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# salt -C &amp;#39;prefix-* and G@osmajorrelease:14&amp;#39; grains.get &amp;#39;osrelease&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;apply-a-state-only-to-nodes-that-have-it&#34;&gt;Apply a state only to nodes that have it&lt;/h4&gt;
&lt;p&gt;Get all states for a specific group of nodes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# salt &amp;#39;prefix-*&amp;#39; state.show_lowstate --out=json &amp;gt; out.json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Use &lt;code&gt;jq&lt;/code&gt; to only return nodes that have a specific &lt;code&gt;state&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat out.json | \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jq -r &amp;#39;select(.[][].__sls__ == &amp;#34;state&amp;#34;) | keys[]&amp;#39; | \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sort -u
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wrangle this string to make it into a salt-compatible list (comma-separated), and then use that, ping to check before trying &lt;code&gt;state.apply&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo salt -L &amp;#39;host,host,host&amp;#39; test.ping
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
  </channel>
</rss>
